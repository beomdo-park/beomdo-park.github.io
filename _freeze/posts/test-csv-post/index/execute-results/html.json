{
  "hash": "2ef68a803d850f9513516047da8799e8",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"CSV 데이터 테스트\"\ndescription: \"이 포스트는 CSV 파일을 읽고 출력하는 예제입니다.\"\ndate: \"2025-05-25\"\ncategories: [\"Test\", \"CSV\"]\n\n---\n\n이 포스트는 CSV 파일을 읽고 출력하는 예제입니다.\n\n::: {#4fef66f1 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n\n# 데이터 로드\ntry:\n    # GitHub Pages 배포 시 또는 로컬 preview 시 상대 경로\n    df = pd.read_csv('../../data/sample_grades.csv') \nexcept FileNotFoundError:\n    # 로컬에서 직접 .qmd 파일을 실행하거나, 경로가 다른 경우를 위한 예외 처리\n    # 실제 프로젝트에서는 경로 관리를 더 견고하게 해야 합니다.\n    try:\n        df = pd.read_csv('data/sample_grades.csv') # 프로젝트 루트 기준\n    except FileNotFoundError:\n        df = pd.DataFrame({\n            'error': ['File not found. Please check the path.']\n        })\n\nprint(\"CSV 데이터 출력:\")\nprint(df.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCSV 데이터 출력:\n   student_id     name  score\n0           1    Alice     85\n1           2      Bob     92\n2           3  Charlie     78\n3           4    David     95\n```\n:::\n:::\n\n\n위 코드 블록은 `sample_grades.csv` 파일의 내용을 읽어 Pandas DataFrame으로 변환한 후, 처음 5개 행을 출력합니다.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}