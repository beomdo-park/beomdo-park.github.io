{
  "hash": "bdf5f19134af9565c237d86ba1c56185",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"[2025 ABC 프로젝트 멘토링 8기] 5주차 - 실제 전력 사용량 데이터를 활용한 이상 탐지\"\ndescription: \"이전 주차에서 개발한 CNN 오토인코더 모델을 실제 Kaggle의 주택 전력 사용량 데이터에 적용하여, 현실 데이터에서 발생하는 이상 패턴을 탐지하는 과정을 다룹니다.\"\ndate: \"2025-06-19\"\nauthor: \"Beomdo Park\"\ncategories: [\"ABC프로젝트멘토링\", \"유클리드소프트\", \"고용노동부\", \"대한상공회의소\", \"미래내일일경험사업\", \"PyTorch\"]\npage-layout: full\nfreeze: false\n---\n\n> 안녕하세요, ABC 프로젝트 멘토링 8기 다섯 번째 기술노트입니다. Week04에서 개발한 CNN 오토인코더 모델을 실제 Kaggle 공개 데이터셋(주택 전력 사용량 3년치)에 적용해, 실전 환경에서의 이상 탐지 성능과 한계를 점검합니다. 이 과정을 통해, 이론적 모델이 실제 데이터에서 어떻게 동작하는지, 그리고 실무에서 마주칠 수 있는 문제와 해결책을 탐구합니다.\n\n::: {.callout-tip title=\"이전 포스트\"}\n[Week4 포스트](https://beomdo-park.github.io/posts/ABC_week04_model_optimization/)에서 CNN 오토인코더 모델의 성능 개선과 하이퍼파라미터 최적화 과정을 다뤘습니다. 이번 포스트는 해당 모델을 실제 데이터에 적용하는 실전 단계에 초점을 맞춥니다.\n:::\n\n## 1. 데이터 소개 및 준비\n\n이번 주에 사용할 데이터는 Kaggle에 공개된 **'Residential Power Usage 3-Years Data'**입니다. 한 가정의 3년간 전력 사용량이 분 단위로 기록된 시계열 데이터로, 실제 환경에서 발생하는 다양한 패턴과 이상 현상을 포함하고 있습니다.\n\n먼저, GitHub Raw URL을 통해 데이터를 불러오고, 시계열 분석을 위해 날짜 컬럼을 인덱스로 변환한 뒤, 전력 사용량 컬럼만 추출합니다.\n\n\n::: {#data-loading .cell execution_count=2}\n\n::: {.cell-output .cell-output-stdout}\n```\n데이터 로딩 시작...\n데이터 로딩 완료.\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 35952 entries, 0 to 35951\nData columns (total 4 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   StartDate    35952 non-null  object \n 1   Value (kWh)  35952 non-null  float64\n 2   day_of_week  35952 non-null  int64  \n 3   notes        35952 non-null  object \ndtypes: float64(1), int64(1), object(2)\nmemory usage: 1.1+ MB\n```\n:::\n:::\n\n\n데이터는 'StartDate', 'Value (kWh)', 'day_of_week', 'notes' 등의 컬럼으로 구성되어 있습니다. 시계열 분석을 위해 'StartDate'를 datetime 형식으로 변환하고 인덱스로 설정한 뒤, 'Value (kWh)' 컬럼만 사용하겠습니다. 전체 데이터를 사용하여 분석을 진행합니다.\n\n::: {#cell-data-preprocessing .cell execution_count=3}\n``` {.python .cell-code}\nprint(\"데이터 전처리 시작...\")\n# 'StartDate'를 datetime으로 변환하고 인덱스로 설정\ndf['StartDate'] = pd.to_datetime(df['StartDate'])\ndf = df.set_index('StartDate')\n\n# 시간순으로 정렬\ndf.sort_index(inplace=True)\nprint(\"데이터 시간순 정렬 완료.\")\n\n# 'Value (kWh)' 컬럼만 선택\n# df.info() 결과에 따라 'Value (kWh)'를 사용합니다.\nvalue_col = 'Value (kWh)'\ndf_value = df[[value_col]].copy()\n\n# 데이터 시각화 (전체 기간)\nplt.figure(figsize=(15, 6))\nplt.plot(df_value.index, df_value[value_col], label='전력 사용량 (전체 기간)')\nplt.title('시간에 따른 전력 사용량 (전체 기간)')\nplt.xlabel('날짜')\nplt.ylabel('사용량 (kWh)')\nplt.legend()\nplt.grid(True)\nplt.show()\n\nprint(f\"전체 데이터 크기: {df_value.shape}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n데이터 전처리 시작...\n데이터 시간순 정렬 완료.\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/data-preprocessing-output-2.png){#data-preprocessing width=1218 height=542}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n전체 데이터 크기: (35952, 1)\n```\n:::\n:::\n\n\n## 2. 데이터 전처리 및 윈도우 생성\n\n시계열 데이터의 추세(Trend) 영향을 줄이고, 각 윈도우의 지역적 패턴에 집중하기 위해 윈도우별로 독립적인 정규화를 수행합니다. 이 방법은 데이터의 전반적인 스케일 변화에 덜 민감한 모델을 만드는 데 도움이 됩니다.\n\n::: {#scaling-and-windowing .cell execution_count=4}\n``` {.python .cell-code}\nprint(\"윈도우 생성 및 정규화 시작...\")\n# 원본 데이터에서 바로 윈도우 생성\nraw_data = df_value[value_col].values\n\n# 슬라이딩 윈도우 생성 함수\ndef sliding_window(data, window_size, step_size=1):\n    n_windows = (len(data) - window_size) // step_size + 1\n    return np.array([data[i:i+window_size] for i in range(0, n_windows * step_size, step_size)])\n\n# 윈도우 생성 (윈도우 크기는 60분(1시간)으로 설정)\nwindow_size = 60\nraw_windows = sliding_window(raw_data, window_size)\n\n# 윈도우별 정규화\nscaled_windows = np.array([StandardScaler().fit_transform(window.reshape(-1, 1)).flatten() for window in raw_windows])\n\nall_windows_torch = torch.from_numpy(scaled_windows[..., np.newaxis].transpose(0, 2, 1)).float()\n\nprint(f\"생성된 윈도우 데이터 shape: {all_windows_torch.shape}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n윈도우 생성 및 정규화 시작...\n생성된 윈도우 데이터 shape: torch.Size([35893, 1, 60])\n```\n:::\n:::\n\n\n## 3. 안정 구간을 이용한 모델 학습 전략\n\n실제 데이터에서는 초반부와 이후 구간의 패턴이 다를 수 있습니다(구간 변화, Regime Change). 전체 데이터를 학습하면 변화 자체를 이상으로 탐지할 수 있으므로, **패턴이 안정화된 구간만을 '정상'으로 정의하고 해당 구간 데이터로만 모델을 학습**합니다.\n\n::: {#split-data-for-training .cell execution_count=5}\n``` {.python .cell-code}\n# 학습 데이터와 전체 평가 데이터 분리\n# 패턴이 안정화된 5000번째 윈도우부터를 학습 데이터로 사용\ntrain_start_index = 5000\ntrain_windows_torch = all_windows_torch[train_start_index:]\n\nprint(f\"전체 윈도우 수: {all_windows_torch.shape[0]}\")\nprint(f\"학습에 사용할 윈도우 수: {train_windows_torch.shape[0]}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n전체 윈도우 수: 35893\n학습에 사용할 윈도우 수: 30893\n```\n:::\n:::\n\n\n이제 `CNNAutoencoderWithDropout` 모델을 이 안정 구간 데이터로만 학습시킵니다.\n\n::: {#model-definition-and-training .cell execution_count=6}\n``` {.python .cell-code}\nclass CNNAutoencoderWithDropout(nn.Module):\n    def __init__(self, input_shape, dropout_rate=0.2):\n        super(CNNAutoencoderWithDropout, self).__init__()\n        # Encoder\n        self.encoder_conv1 = nn.Conv1d(in_channels=input_shape[1], out_channels=32, kernel_size=7, padding=3)\n        self.encoder_relu1 = nn.ReLU()\n        self.encoder_drop1 = nn.Dropout(dropout_rate)\n        self.encoder_pool1 = nn.MaxPool1d(kernel_size=2, stride=2)\n        self.encoder_conv2 = nn.Conv1d(in_channels=32, out_channels=16, kernel_size=7, padding=3)\n        self.encoder_relu2 = nn.ReLU()\n        self.encoder_drop2 = nn.Dropout(dropout_rate)\n        self.encoder_pool2 = nn.MaxPool1d(kernel_size=2, stride=2)\n\n        # Decoder\n        self.decoder_conv_t1 = nn.ConvTranspose1d(in_channels=16, out_channels=16, kernel_size=2, stride=2)\n        self.decoder_relu1 = nn.ReLU()\n        self.decoder_drop3 = nn.Dropout(dropout_rate)\n        self.decoder_conv_t2 = nn.ConvTranspose1d(in_channels=16, out_channels=32, kernel_size=2, stride=2)\n        self.decoder_relu2 = nn.ReLU()\n        self.decoder_drop4 = nn.Dropout(dropout_rate)\n        self.decoder_conv_final = nn.Conv1d(in_channels=32, out_channels=input_shape[1], kernel_size=7, padding=3)\n\n    def forward(self, x):\n        # Encoder\n        x = self.encoder_conv1(x)\n        x = self.encoder_relu1(x)\n        x = self.encoder_drop1(x)\n        x = self.encoder_pool1(x)\n        x = self.encoder_conv2(x)\n        x = self.encoder_relu2(x)\n        x = self.encoder_drop2(x)\n        encoded = self.encoder_pool2(x)\n        \n        # Decoder\n        x = self.decoder_conv_t1(encoded)\n        x = self.decoder_relu1(x)\n        x = self.decoder_drop3(x)\n        x = self.decoder_conv_t2(x)\n        x = self.decoder_relu2(x)\n        x = self.decoder_drop4(x)\n        x = self.decoder_conv_final(x)\n        return x\n\n# 모델 정의 및 학습\nmodel = CNNAutoencoderWithDropout(input_shape=(window_size, 1), dropout_rate=0.2)\noptimizer = optim.Adam(model.parameters(), lr=0.001)\ncriterion = nn.MSELoss()\n\n# 안정 구간 데이터로만 학습\ndataset = TensorDataset(train_windows_torch)\ndata_loader = DataLoader(dataset, batch_size=64, shuffle=True)\n\nprint(\"모델 학습 시작 (안정 구간 데이터)...\")\nepochs = 10\nfor epoch in range(epochs):\n    model.train()\n    for data in data_loader:\n        inputs = data[0]\n        optimizer.zero_grad()\n        outputs = model(inputs)\n        loss = criterion(outputs, inputs)\n        loss.backward()\n        optimizer.step()\n    if (epoch + 1) % 5 == 0:\n        print(f\"Epoch [{epoch+1}/{epochs}], Loss: {loss.item():.6f}\")\nprint(\"모델 학습 완료.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n모델 학습 시작 (안정 구간 데이터)...\nEpoch [5/10], Loss: 0.131243\nEpoch [10/10], Loss: 0.127700\n모델 학습 완료.\n```\n:::\n:::\n\n\n## 4. 모델 평가 및 이상치 탐지\n\n학습된 모델로 전체 데이터의 재구성 오차를 계산하고, 학습 데이터의 재구성 오차 분포를 기반으로 임계값(Quantile 기준)을 설정해 이상치를 탐지합니다.\n\n::: {#evaluation-and-detection .cell execution_count=7}\n``` {.python .cell-code}\nmodel.eval()\n\n# 1. 학습 데이터의 재구성 오차를 기반으로 임계값 설정\nwith torch.no_grad():\n    reconstructed_train = model(train_windows_torch)\n    error_train = torch.mean((train_windows_torch - reconstructed_train)**2, dim=(1, 2))\n    train_reconstruction_error = error_train.numpy()\n\nquantile_level = 0.995\nthreshold = np.quantile(train_reconstruction_error, quantile_level)\nprint(f\"임계값 (학습 데이터 기준 {quantile_level*100:.1f}% Quantile): {threshold:.6f}\")\n\n# 2. 전체 데이터에 대한 재구성 오차 계산\nwith torch.no_grad():\n    reconstructed_all = model(all_windows_torch)\n    error_all = torch.mean((all_windows_torch - reconstructed_all)**2, dim=(1, 2))\n    reconstruction_error = error_all.numpy()\n\n# 3. 임계값을 기준으로 전체 데이터에서 이상치 탐지\nanomaly_window_indices = np.where(reconstruction_error > threshold)[0]\n\n# 윈도우 내 최대 오차 지점 탐색\npointwise_error = ((all_windows_torch - reconstructed_all)**2).squeeze().numpy()\npredicted_anomaly_points = []\nfor window_idx in anomaly_window_indices:\n    max_error_idx_in_window = np.argmax(pointwise_error[window_idx])\n    absolute_idx = window_idx + max_error_idx_in_window\n    predicted_anomaly_points.append(absolute_idx)\n\npredicted_anomaly_points = sorted(list(set(predicted_anomaly_points)))\nprint(f\"탐지된 이상치 포인트 수: {len(predicted_anomaly_points)}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n임계값 (학습 데이터 기준 99.5% Quantile): 0.277628\n탐지된 이상치 포인트 수: 45\n```\n:::\n:::\n\n\n### 탐지 결과 시각화\n\n이상치로 탐지된 구간과 원본 데이터를 함께 시각화하여, 모델이 어떤 패턴을 '이상'으로 간주했는지 확인합니다.\n\n::: {#cell-final-visualization .cell execution_count=8}\n``` {.python .cell-code}\n# 시각화를 위해 원본 데이터 사용\noriginal_data = df_value[value_col].values\n\nplt.figure(figsize=(15, 8))\n\n# 상단: 전체 데이터와 탐지 결과\nplt.subplot(2, 1, 1)\nplt.plot(original_data, label='원본 전력 사용량', alpha=0.8)\n\nif len(predicted_anomaly_points) > 0:\n    valid_indices = [i for i in predicted_anomaly_points if i < len(original_data)]\n    plt.scatter(valid_indices, original_data[valid_indices],\n                color='red', marker='x', s=100, linewidth=2, label='탐지된 이상치', zorder=5)\n\nplt.title('실제 전력 사용량 데이터 이상 탐지 결과 (안정 구간 학습)', fontsize=16)\nplt.xlabel('시간 스텝')\nplt.ylabel('사용량 (kWh)')\nplt.legend()\nplt.grid(True, linestyle='--', alpha=0.6)\n\n# 하단: 재구성 오차와 임계값\nplt.subplot(2, 1, 2)\nplt.plot(reconstruction_error, label='윈도우별 재구성 오차', color='blue')\nplt.axhline(y=threshold, color='r', linestyle='--', label=f'임계값 ({threshold:.4f})')\nif len(anomaly_window_indices) > 0:\n    plt.scatter(anomaly_window_indices, reconstruction_error[anomaly_window_indices], c='red', s=100, label='이상치로 탐지된 윈도우', zorder=5)\n\nplt.title('윈도우별 재구성 오차', fontsize=16)\nplt.xlabel('윈도우 인덱스')\nplt.ylabel('재구성 오차 (MSE)')\nplt.legend()\nplt.grid(True, linestyle='--', alpha=0.6)\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/final-visualization-output-1.png){#final-visualization width=1489 height=790}\n:::\n:::\n\n\n## 5. 결론 및 고찰\n\n이번 실습을 통해, Week04에서 구축한 CNN 오토인코더 모델을 실제 주택 전력 사용량 데이터에 성공적으로 적용해 보았습니다. 가상의 데이터가 아닌 실제 데이터에 적용함으로써, 모델이 예측 불가능하고 불규칙한 패턴 속에서도 의미 있는 이상 신호를 포착할 수 있음을 확인했습니다.\n\n특히, 데이터의 특정 안정 구간만을 '정상'으로 정의하고 학습시키는 전략을 통해, 데이터 전체에 걸친 패턴 변화(Regime Change)와 국소적인 이상치를 효과적으로 구분하여 탐지할 수 있었습니다. 시각화 결과, 모델이 학습하지 않은 초반부 구간은 전반적으로 높은 재구성 오차를 보이며 '이상 구간'으로 탐지되었고, 학습에 사용된 안정 구간 내에서도 급격한 전력 사용량 변화를 성공적으로 포착했습니다.\n\n### 주요 인사이트\n- **안정 구간 학습의 효과**: '정상' 상태에 대한 명확한 정의는 비지도 학습 기반 이상 탐지 모델의 성능을 크게 향상시킬 수 있습니다. 데이터의 모든 부분을 동등하게 보는 대신, 도메인 지식이나 사전 분석을 통해 기준이 되는 구간을 선택하는 것이 중요합니다.\n- 단일 변수 시계열 데이터에서도 CNN 오토인코더는 효과적으로 정상 패턴을 학습하고, 급격한 전력 사용량 변화 등을 이상치로 탐지할 수 있습니다.\n- Quantile 기반의 임계값 설정은 라벨이 없는 실제 데이터에서 통계적으로 안정적인 이상치 탐지 기준을 제공하는 유용한 방법입니다.\n- 실제 데이터는 예측치 못한 노이즈와 계절성, 추세 등 복합적인 패턴을 포함하고 있어, 모델이 이를 얼마나 잘 일반화하여 '정상'으로 학습하는지가 이상 탐지 성능의 관건이 됩니다.\n\n### 한계 및 개선 방향\n- **정량적 평가의 어려움**: 실제 이상치 라벨이 없어 모델의 성능을 정량적으로 평가(e.g., F1-Score)하기 어렵습니다.\n- **단변량의 한계**: 현재 모델은 '전력 사용량' 외의 다른 정보(요일, 시간, 날씨 등)를 활용하지 못해, 복합적인 요인으로 발생하는 이상을 탐지하는 데 한계가 있습니다.\n- **임계값의 민감도**: Quantile 기반 임계값은 통계적으로 유용하지만, 데이터의 분포에 따라 탐지 민감도가 크게 달라질 수 있습니다. 실제 운영 환경에서는 여러 임계값을 테스트하며 최적의 균형점을 찾아야 합니다.\n\n향후에는 도메인 지식을 활용하여 이상치에 대한 명확한 기준을 정의하고, 다변량 시계열 모델을 도입하여 더 풍부한 정보를 바탕으로 이상 탐지 성능을 고도화하는 연구를 진행해 볼 수 있을 것입니다.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}