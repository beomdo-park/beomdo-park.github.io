--- 
title: "[2025 ABC 프로젝트 멘토링 8기] 프로젝트 1주차" 
description: "Python을 활용한 시계열 데이터 분석 기초 및 시각화 예제를 다룹니다."
date: "2025-05-24" 
author: "Beomdo Park" 
categories: ["ABC프로젝트멘토링", "유클리드소프트", "고용노동부", "대한상공회의소", "미래내일일경험사업"]
page-layout: full
freeze: false

---
> 유클리드소프트에서 진행하는 [ABC 프로젝트 멘토링](https://abcbootcamp.kr/abc_mentor/)에 8기로 참여하게 되었습니다.  </br></br>
**[산업 전력 데이터의 이상치 탐지 성능 향상 솔루션 구축]**을 주제로 다양한 데이터 분석 및 인공지능 기법을 학습하고 실제 프로젝트에 적용해볼 예정입니다.

::: {.callout-tip title=""}
해당 포스트에서는 첫 주차 활동으로, 시계열 데이터의 기본 개념과 Python을 활용한 기초 분석 방법을 정리해 보았습니다. 앞으로의 과정을 통해 데이터 전처리, 이상치 탐지, 모델링 등 실무에 필요한 다양한 역량을 키워 나갈 예정입니다.
:::

## 시계열 데이터란?

시계열 데이터(Time Series Data)는 시간 순서대로 정렬된 데이터 포인터들의 연속입니다. 예를 들어, 주식 가격, 월별 강수량, 웹사이트 트래픽 등이 시계열 데이터에 해당합니다. 이러한 데이터는 시간의 흐름에 따른 패턴이나 추세를 분석하는 데 사용됩니다.

## 시계열 분석의 중요성

시계열 분석은 다음과 같은 이유로 중요합니다.

*   **예측**: 과거 데이터를 기반으로 미래 값을 예측합니다. (예: 내일의 주가 예측)
*   **패턴 인식**: 계절성, 추세, 주기 등 데이터 내의 의미 있는 패턴을 파악합니다.
*   **이상 감지**: 일반적인 패턴에서 벗어나는 특이점을 탐지합니다. (예: 시스템 오류 감지)
*   **정책 결정**: 분석 결과를 바탕으로 더 나은 의사 결정을 내릴 수 있습니다.

## Python을 이용한 시계열 데이터 분석 기초

Python의 `pandas`와 `matplotlib` 라이브러리를 사용하여 기본적인 시계열 데이터 분석을 수행하는 방법을 알아봅니다.

```{python}
#| label: matplotlib-font-setup
#| echo: false
#| include: false
#| eval: true

### 포스트의 한글 폰트를 불러오는 코드. 배포 시 보이지 않도록 echo, include: false
import os
import sys

# Path to the setup script, assuming Quarto's CWD is the project root.
font_setup_script_path = "../../scripts/matplotlib_font_setup.py" # Corrected path

try:
    if os.path.exists(font_setup_script_path):
        exec(open(font_setup_script_path, encoding='utf-8').read())
    else:
        # This case should ideally not happen if the file structure is correct.
        print(f"WARNING: Font setup script '{font_setup_script_path}' not found at '{os.path.abspath(font_setup_script_path)}'. CWD: '{os.getcwd()}'. Using fallback font settings.")
        # Fallback font settings (minimal)
        import platform
        import matplotlib.pyplot as plt 
        if platform.system() == 'Windows':
            plt.rc('font', family='Malgun Gothic')
        elif platform.system() == 'Darwin':
            plt.rc('font', family='AppleGothic')
        plt.rcParams['axes.unicode_minus'] = False
except Exception as e:
    print(f"ERROR executing font setup script '{font_setup_script_path}': {e}")
    # Fallback to ensure subsequent cells don't fail due to plt not being configured
    import matplotlib.pyplot as plt
    plt.rcParams['axes.unicode_minus'] = False
```

### 1. 필요한 라이브러리 불러오기

먼저, 데이터 분석에 필요한 라이브러리들을 불러옵니다.

```{python}
#| label: load-libraries
#| echo: true
#| eval: true

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
```

### 2. 샘플 시계열 데이터 생성

분석을 위해 간단한 샘플 시계열 데이터를 생성하겠습니다. 2025년 1월 1일부터 100일간의 가상 데이터를 만듭니다.

```{python}
#| label: generate-sample-data
#| echo: true
#| eval: true

# 날짜 범위 생성
date_rng = pd.date_range(start='2025-01-01', end='2025-04-10', freq='D')

# 데이터 프레임 생성
data = pd.DataFrame(date_rng, columns=['date'])

# 임의의 데이터 생성 (예: 웹사이트 방문자 수)
data['visitors'] = np.random.randint(50, 200, size=(len(date_rng)))

# 'date' 컬럼을 인덱스로 설정
data.set_index('date', inplace=True)

print(data.head())
```

### 3. 시계열 데이터 시각화

생성된 시계열 데이터를 시각화하여 전반적인 추세를 파악합니다.

```{python}
#| label: fig-time-series-plot
#| fig-cap: "일별 웹사이트 방문자 수"
#| echo: true
#| eval: true

plt.figure(figsize=(9, 5))
plt.plot(data.index, data['visitors'], label='일별 방문자 수')
plt.title('일별 웹사이트 방문자 수')
plt.xlabel('날짜')
plt.ylabel('방문자 수')
plt.legend()
plt.grid(True)
plt.show()
```

### 4. 이동 평균(Moving Average) 계산 및 시각화

이동 평균은 단기적인 변동을 완화하여 장기적인 추세를 파악하는 데 도움을 줍니다. 7일 이동 평균을 계산하고 시각화해 보겠습니다.

```{python}
#| label: fig-moving-average
#| fig-cap: "7일 이동 평균을 포함한 방문자 수"
#| echo: true
#| eval: true

# 7일 이동 평균 계산
data['rolling_mean_7'] = data['visitors'].rolling(window=7).mean()

plt.figure(figsize=(9, 5))
plt.plot(data.index, data['visitors'], label='일별 방문자 수')
plt.plot(data.index, data['rolling_mean_7'], label='7일 이동 평균', color='red')
plt.title('일별 웹사이트 방문자 수 및 7일 이동 평균')
plt.xlabel('날짜')
plt.ylabel('방문자 수')
plt.legend()
plt.grid(True)
plt.show()

print(data.head(10))
```

### 5. 시계열 분해 (Decomposition) - (선택 사항)

더 고급 분석에서는 시계열 데이터를 추세(Trend), 계절성(Seasonality), 잔차(Residual)로 분해하여 각 구성 요소를 분석할 수 있습니다. `statsmodels` 라이브러리를 사용하면 이를 수행할 수 있습니다.

```{python}
#| label: fig-decomposition
#| fig-cap: "시계열 분해 결과"
#| echo: true
#| eval: true

from statsmodels.tsa.seasonal import seasonal_decompose

# 시계열 분해 (덧셈 모델)
decomposition = seasonal_decompose(data['visitors'], model='additive', period=7)

trend = decomposition.trend
seasonal = decomposition.seasonal
residual = decomposition.resid

plt.figure(figsize=(9, 8))
plt.subplot(411)
plt.plot(data['visitors'], label='Original')
plt.legend(loc='upper left')
plt.subplot(412)
plt.plot(trend, label='Trend')
plt.legend(loc='upper left')
plt.subplot(413)
plt.plot(seasonal,label='Seasonality')
plt.legend(loc='upper left')
plt.subplot(414)
plt.plot(residual, label='Residuals')
plt.legend(loc='upper left')
plt.tight_layout()
plt.show()
```


## 결론

이 튜토리얼에서는 Python을 사용하여 시계열 데이터를 생성하고, 시각화하며, 이동 평균을 계산하는 기본적인 방법을 살펴보았습니다. 시계열 분석은 매우 광범위한 분야이며, 이 튜토리얼은 그 시작점에 불과합니다. 더 나아가 ARIMA, SARIMA, Prophet과 같은 고급 모델을 학습하여 더 정교한 예측 및 분석을 수행할 수 있습니다.

---