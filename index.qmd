---
subtitle: "Posts"



listing:
  contents: posts
  sort: "date desc"
  type: default
  # type: grid
  # grid-columns: 1
  categories: true
  sort-ui: false
  filter-ui: true
  fields: [date, title, author, image, description, categories, reading-time]
page-layout: full
---


<script>
document.addEventListener('DOMContentLoaded', function() {
  var head = document.head;
  var first = head.firstChild;

  // Google site verification
  var googleMeta = document.createElement('meta');
  googleMeta.name = "google-site-verification";
  googleMeta.content = "tQV_UbBEk_vL_s9vxCne2Yd0GPHJ4vn8s2pPhfV0PYo";
  head.insertBefore(googleMeta, first);

  // Naver site verification
  var naverMeta = document.createElement('meta');
  naverMeta.name = "naver-site-verification";
  naverMeta.content = "6c1006d6edf85b99c51f1f82aabd2a4fd68ec739";
  head.insertBefore(naverMeta, first);
});
</script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    let subtitleElement = null;
    let categoryLinksContainer = null;
    const maxAttempts = 20; // 최대 20번 시도 (0.5초 간격으로 약 10초)
    let attempts = 0;

    const findElementsInterval = setInterval(function() {
        subtitleElement = document.querySelector('.quarto-title-block .subtitle');
        const marginSidebar = document.querySelector('#quarto-margin-sidebar');
        attempts++;

        if (marginSidebar) {
            // console.log('Dynamic subtitle: Found #quarto-margin-sidebar.'); // 로그 확인용
            categoryLinksContainer = marginSidebar.querySelector('div.quarto-listing-category');
        } else if (attempts === 1) { // 첫 시도에서 못찾으면 바로 로그 남기기
            console.warn('Dynamic subtitle: #quarto-margin-sidebar not found on first attempt.');
        }

        if ((subtitleElement && categoryLinksContainer) || attempts >= maxAttempts) {
            clearInterval(findElementsInterval);
            if (subtitleElement && categoryLinksContainer) {
                console.log('Dynamic subtitle: Successfully found subtitleElement and categoryLinksContainer.');
                initializeDynamicSubtitle(subtitleElement, categoryLinksContainer);
            } else {
                if (!subtitleElement) {
                    console.warn('Dynamic subtitle: Subtitle element (.quarto-title-block .subtitle) not found after multiple attempts.');
                }
                if (!categoryLinksContainer) {
                    console.warn('Dynamic subtitle: Category links container (div.quarto-listing-category within #quarto-margin-sidebar) not found after multiple attempts.');
                    if (marginSidebar) {
                        console.log('Dynamic subtitle: InnerHTML of #quarto-margin-sidebar:');
                        console.log(marginSidebar.innerHTML);
                    } else {
                        console.warn('Dynamic subtitle: #quarto-margin-sidebar was also not found.');
                    }
                }
            }
        }
    }, 500); // 500ms (0.5초) 간격으로 확인

    function initializeDynamicSubtitle(subtitleElem, categoriesContainer) {
        const originalSubtitleText = subtitleElem.textContent.trim();

        const updateSubtitle = () => {
            const activeFilterElement = categoriesContainer.querySelector('div.category.active');
            if (activeFilterElement) {
              let categoryName = activeFilterElement.textContent.trim(); // 예: "All (1)" 또는 "News (3)"
              const categoryNameOnly = categoryName.replace(/\s*\(\d+\)$/, '').trim(); // 숫자 제거 -> "All" 또는 "News"
              
              if (categoryNameOnly === "All") {
                subtitleElem.textContent = originalSubtitleText;
              } else {
                subtitleElem.textContent = `Posts by [${categoryNameOnly}]`;
              }
            } else {
              // 활성 필터가 없으면 원래 부제목으로 되돌립니다.
              subtitleElem.textContent = originalSubtitleText;
            }
        };

        const observer = new MutationObserver((mutationsList) => {
            for(const mutation of mutationsList) {
                if (mutation.type === 'attributes' && 
                    mutation.attributeName === 'class' && 
                    mutation.target.matches('div.category')) { // categoriesContainer의 자식인 div.category를 감지
                    updateSubtitle();
                    return; 
                }
            }
        });

        observer.observe(categoriesContainer, { // 찾은 categoriesContainer를 관찰
            attributes: true, 
            childList: false, 
            subtree: true     
        });

        updateSubtitle(); // 초기 업데이트
    }
});
</script>