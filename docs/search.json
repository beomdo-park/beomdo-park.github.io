[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "beomdo's ML-DL blog",
    "section": "",
    "text": "CSV 데이터 테스트\n\n\n\nTest\n\nCSV\n\n\n\n이 포스트는 CSV 파일을 읽고 출력하는 예제입니다.\n\n\n\n\n\nMay 25, 2025\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n[2025 ABC 프로젝트 멘토링 8기] 프로젝트 1주차\n\n\n\nABC프로젝트멘토링\n\n유클리드소프트\n\n고용노동부\n\n대한상공회의소\n\n미래내일일경험사업\n\n\n\nPython을 활용한 시계열 데이터 분석 기초 및 시각화 예제를 다룹니다.\n\n\n\n\n\nMay 24, 2025\n\n\nBeomdo Park\n\n4 min\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/ABC_week01_data analysis/index.html",
    "href": "posts/ABC_week01_data analysis/index.html",
    "title": "[2025 ABC 프로젝트 멘토링 8기] 프로젝트 1주차",
    "section": "",
    "text": "유클리드소프트에서 진행하는 ABC 프로젝트 멘토링에 8기로 참여하게 되었습니다.  [산업 전력 데이터의 이상치 탐지 성능 향상 솔루션 구축]을 주제로 다양한 데이터 분석 및 인공지능 기법을 학습하고 실제 프로젝트에 적용해볼 예정입니다."
  },
  {
    "objectID": "posts/ABC_week01_data analysis/index.html#시계열-데이터란",
    "href": "posts/ABC_week01_data analysis/index.html#시계열-데이터란",
    "title": "[2025 ABC 프로젝트 멘토링 8기] 프로젝트 1주차",
    "section": "시계열 데이터란?",
    "text": "시계열 데이터란?\n시계열 데이터(Time Series Data)는 시간 순서대로 정렬된 데이터 포인터들의 연속입니다. 예를 들어, 주식 가격, 월별 강수량, 웹사이트 트래픽 등이 시계열 데이터에 해당합니다. 이러한 데이터는 시간의 흐름에 따른 패턴이나 추세를 분석하는 데 사용됩니다."
  },
  {
    "objectID": "posts/ABC_week01_data analysis/index.html#시계열-분석의-중요성",
    "href": "posts/ABC_week01_data analysis/index.html#시계열-분석의-중요성",
    "title": "[2025 ABC 프로젝트 멘토링 8기] 프로젝트 1주차",
    "section": "시계열 분석의 중요성",
    "text": "시계열 분석의 중요성\n시계열 분석은 다음과 같은 이유로 중요합니다.\n\n예측: 과거 데이터를 기반으로 미래 값을 예측합니다. (예: 내일의 주가 예측)\n패턴 인식: 계절성, 추세, 주기 등 데이터 내의 의미 있는 패턴을 파악합니다.\n이상 감지: 일반적인 패턴에서 벗어나는 특이점을 탐지합니다. (예: 시스템 오류 감지)\n정책 결정: 분석 결과를 바탕으로 더 나은 의사 결정을 내릴 수 있습니다."
  },
  {
    "objectID": "posts/ABC_week01_data analysis/index.html#python을-이용한-시계열-데이터-분석-기초",
    "href": "posts/ABC_week01_data analysis/index.html#python을-이용한-시계열-데이터-분석-기초",
    "title": "[2025 ABC 프로젝트 멘토링 8기] 프로젝트 1주차",
    "section": "Python을 이용한 시계열 데이터 분석 기초",
    "text": "Python을 이용한 시계열 데이터 분석 기초\nPython의 pandas와 matplotlib 라이브러리를 사용하여 기본적인 시계열 데이터 분석을 수행하는 방법을 알아봅니다.\n\n1. 필요한 라이브러리 불러오기\n먼저, 데이터 분석에 필요한 라이브러리들을 불러옵니다.\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\n\n\n2. 샘플 시계열 데이터 생성\n분석을 위해 간단한 샘플 시계열 데이터를 생성하겠습니다. 2025년 1월 1일부터 100일간의 가상 데이터를 만듭니다.\n\n# 날짜 범위 생성\ndate_rng = pd.date_range(start='2025-01-01', end='2025-04-10', freq='D')\n\n# 데이터 프레임 생성\ndata = pd.DataFrame(date_rng, columns=['date'])\n\n# 임의의 데이터 생성 (예: 웹사이트 방문자 수)\ndata['visitors'] = np.random.randint(50, 200, size=(len(date_rng)))\n\n# 'date' 컬럼을 인덱스로 설정\ndata.set_index('date', inplace=True)\n\nprint(data.head())\n\n            visitors\ndate                \n2025-01-01       163\n2025-01-02       149\n2025-01-03        54\n2025-01-04       160\n2025-01-05        52\n\n\n\n\n3. 시계열 데이터 시각화\n생성된 시계열 데이터를 시각화하여 전반적인 추세를 파악합니다.\n\nplt.figure(figsize=(9, 5))\nplt.plot(data.index, data['visitors'], label='일별 방문자 수')\nplt.title('일별 웹사이트 방문자 수')\nplt.xlabel('날짜')\nplt.ylabel('방문자 수')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\nFigure 1: 일별 웹사이트 방문자 수\n\n\n\n\n\n\n\n4. 이동 평균(Moving Average) 계산 및 시각화\n이동 평균은 단기적인 변동을 완화하여 장기적인 추세를 파악하는 데 도움을 줍니다. 7일 이동 평균을 계산하고 시각화해 보겠습니다.\n\n# 7일 이동 평균 계산\ndata['rolling_mean_7'] = data['visitors'].rolling(window=7).mean()\n\nplt.figure(figsize=(9, 5))\nplt.plot(data.index, data['visitors'], label='일별 방문자 수')\nplt.plot(data.index, data['rolling_mean_7'], label='7일 이동 평균', color='red')\nplt.title('일별 웹사이트 방문자 수 및 7일 이동 평균')\nplt.xlabel('날짜')\nplt.ylabel('방문자 수')\nplt.legend()\nplt.grid(True)\nplt.show()\n\nprint(data.head(10))\n\n\n\n\n\n\n\nFigure 2: 7일 이동 평균을 포함한 방문자 수\n\n\n\n\n\n            visitors  rolling_mean_7\ndate                                \n2025-01-01       163             NaN\n2025-01-02       149             NaN\n2025-01-03        54             NaN\n2025-01-04       160             NaN\n2025-01-05        52             NaN\n2025-01-06       184             NaN\n2025-01-07       115      125.285714\n2025-01-08       102      116.571429\n2025-01-09       105      110.285714\n2025-01-10       101      117.000000\n\n\n\n\n5. 시계열 분해 (Decomposition) - (선택 사항)\n더 고급 분석에서는 시계열 데이터를 추세(Trend), 계절성(Seasonality), 잔차(Residual)로 분해하여 각 구성 요소를 분석할 수 있습니다. statsmodels 라이브러리를 사용하면 이를 수행할 수 있습니다.\n\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\n# 시계열 분해 (덧셈 모델)\ndecomposition = seasonal_decompose(data['visitors'], model='additive', period=7)\n\ntrend = decomposition.trend\nseasonal = decomposition.seasonal\nresidual = decomposition.resid\n\nplt.figure(figsize=(9, 8))\nplt.subplot(411)\nplt.plot(data['visitors'], label='Original')\nplt.legend(loc='upper left')\nplt.subplot(412)\nplt.plot(trend, label='Trend')\nplt.legend(loc='upper left')\nplt.subplot(413)\nplt.plot(seasonal,label='Seasonality')\nplt.legend(loc='upper left')\nplt.subplot(414)\nplt.plot(residual, label='Residuals')\nplt.legend(loc='upper left')\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\nFigure 3: 시계열 분해 결과"
  },
  {
    "objectID": "posts/ABC_week01_data analysis/index.html#결론",
    "href": "posts/ABC_week01_data analysis/index.html#결론",
    "title": "[2025 ABC 프로젝트 멘토링 8기] 프로젝트 1주차",
    "section": "결론",
    "text": "결론\n이 튜토리얼에서는 Python을 사용하여 시계열 데이터를 생성하고, 시각화하며, 이동 평균을 계산하는 기본적인 방법을 살펴보았습니다. 시계열 분석은 매우 광범위한 분야이며, 이 튜토리얼은 그 시작점에 불과합니다. 더 나아가 ARIMA, SARIMA, Prophet과 같은 고급 모델을 학습하여 더 정교한 예측 및 분석을 수행할 수 있습니다."
  },
  {
    "objectID": "posts/test-csv-post/index.html",
    "href": "posts/test-csv-post/index.html",
    "title": "CSV 데이터 테스트",
    "section": "",
    "text": "이 포스트는 CSV 파일을 읽고 출력하는 예제입니다.\n\nimport pandas as pd\n\n# 데이터 로드\ntry:\n    # GitHub Pages 배포 시 또는 로컬 preview 시 상대 경로\n    df = pd.read_csv('../../data/sample_grades.csv') \nexcept FileNotFoundError:\n    # 로컬에서 직접 .qmd 파일을 실행하거나, 경로가 다른 경우를 위한 예외 처리\n    # 실제 프로젝트에서는 경로 관리를 더 견고하게 해야 합니다.\n    try:\n        df = pd.read_csv('data/sample_grades.csv') # 프로젝트 루트 기준\n    except FileNotFoundError:\n        df = pd.DataFrame({\n            'error': ['File not found. Please check the path.']\n        })\n\nprint(\"CSV 데이터 출력:\")\nprint(df.head())\n\nCSV 데이터 출력:\n   student_id     name  score\n0           1    Alice     85\n1           2      Bob     92\n2           3  Charlie     78\n3           4    David     95\n\n\n위 코드 블록은 sample_grades.csv 파일의 내용을 읽어 Pandas DataFrame으로 변환한 후, 처음 5개 행을 출력합니다."
  },
  {
    "objectID": "posts/my-first-post/index.html",
    "href": "posts/my-first-post/index.html",
    "title": "Blog Posts",
    "section": "",
    "text": "여기에 마크다운으로 내용을 작성합니다. Quarto는 Pandoc 마크다운을 확장하여 다양한 기능을 제공합니다."
  },
  {
    "objectID": "posts/my-first-post/index.html#코드-실행",
    "href": "posts/my-first-post/index.html#코드-실행",
    "title": "Blog Posts",
    "section": "코드 실행",
    "text": "코드 실행\nPython 코드 셀 예시입니다.\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\n\nplt.plot(x, y)\nplt.title(\"Sine Wave\")\nplt.xlabel(\"X-axis\")\nplt.ylabel(\"Y-axis\")\nplt.show()\n\nprint(\"Hello World\")\n\n\n\n\n\n\n\nFigure 1: 간단한 Matplotlib 플롯\n\n\n\n\n\nHello World"
  }
]